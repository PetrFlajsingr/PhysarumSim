#version 460 core

layout(local_size_x=8) in;

struct Particle {
    vec2 position;
    float angleDirection;
    float PADDING;
};

layout(binding = 0, std430)buffer Particles{ Particle particles[]; };
layout(r32f, binding = 1) uniform image2D texTrail;

#define PI 3.1415

uniform float senseAngle;
uniform float senseDistance;
uniform float turnSpeed;
uniform int particleCount;
uniform float movementSpeed;
uniform float deltaT;
uniform float time;
uniform float trailWeight;

vec2 rotate(vec2 v, float a) {
    float s = sin(a);
    float c = cos(a);
    mat2 m = mat2(c, -s, s, c);
    return m * v;
}

// select most pheromone in 3 dirs
// set direction toward that - limited by turnAngle
// move in direction
// save pheromone to trail

struct SenseResult {
    float trail;
    vec2 dir;
    float angle;
};

uint hash(uint state) {
    state ^= 2747636419u;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    return state;
}

float scaleToRange01(uint state) {
    return float(state) / 4294967295.0;
}

float sense(Particle particle, float sensorAngle, ivec2 texSize) {
    const float angle = particle.angleDirection + sensorAngle;
    const vec2 sensorDir = vec2(cos(angle), sin(angle));

    const vec2 sensorPos = particle.position + sensorDir * senseDistance;
    const ivec2 iSensorPos = ivec2(sensorPos);

    // todo sensor size
    const ivec2 texSensorPos = ivec2(min(texSize.x - 1, max(0, iSensorPos.x)), min(texSize.y - 1, max(0, iSensorPos.y)));
    return imageLoad(texTrail, texSensorPos).r;
}

void main() {
    if (gl_GlobalInvocationID.x >= particleCount) { return; }

    Particle particle = particles[gl_GlobalInvocationID.x];
    const vec2 oldParticlePos = particle.position.xy;

    const ivec2 texSize = imageSize(texTrail);
    uint random = hash(uint(particle.position.y * texSize.x + particle.position.x + hash(uint(gl_GlobalInvocationID.x + time * 100000.f))));

    const float angleR = senseAngle * (PI / 180);
    const float fwdVal = sense(particle, 0, texSize);
    const float leftVal = sense(particle, angleR, texSize);
    const float rightVal = sense(particle, -angleR, texSize);

    const float rndSteer = scaleToRange01(random);
    const float turnSpeedR = turnSpeed * 2 * PI;

    if (fwdVal > leftVal && fwdVal > rightVal) {
        //
    } else if (fwdVal < leftVal && fwdVal < rightVal) {
        particle.angleDirection += (rndSteer - 0.5) * 2 * turnSpeedR * deltaT;
    } else if (rightVal > leftVal) {
        particle.angleDirection -= rndSteer * turnSpeedR * deltaT;
    } else if (leftVal > rightVal) {
        particle.angleDirection += rndSteer * turnSpeedR * deltaT;
    }

    const vec2 newDir = vec2(cos(particle.angleDirection), sin(particle.angleDirection));
    vec2 newPos = particle.position + newDir * deltaT * movementSpeed;

    if (newPos.x < 0 || newPos.x >= texSize.x || newPos.y < 0 || newPos.y >= texSize.y) {
        random = hash(random);
        const float randomAngle = scaleToRange01(random) * 2 * PI;
        newPos.x = min(texSize.x - 1, max(0, newPos.x));
        newPos.y = min(texSize.y - 1, max(0, newPos.y));
        particle.angleDirection = randomAngle;
    } else {
        const ivec2 tCoord = ivec2(newPos);
        const float prevTrail = imageLoad(texTrail, tCoord).r;
        imageStore(texTrail, tCoord, vec4(prevTrail + trailWeight * deltaT));
    }
    particle.position = newPos;
    particles[gl_GlobalInvocationID.x] =  particle;
}





























