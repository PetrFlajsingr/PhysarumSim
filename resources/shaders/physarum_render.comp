#version 460 core

layout(local_size_x=8, local_size_y=8)in;
/**********************************************************************************************************************/
/*************************************************----ENUMS----********************************************************/
/**********************************************************************************************************************/
#define BLEND_TYPE int
#define BLEND_ADDITIVE 0
#define BLEND_ALPHA_MIX 1
#define BLEND_LAYERED 2

/**********************************************************************************************************************/
/************************************************----STRUCTS----*******************************************************/
/**********************************************************************************************************************/
struct Settings {
    float trailPow;
};

/**********************************************************************************************************************/
/***********************************************----CONSTANTS----******************************************************/
/**********************************************************************************************************************/
#define TRUE 1
#define FALSE 0

/**********************************************************************************************************************/
/*************************************************----LAYOUT----*******************************************************/
/**********************************************************************************************************************/
layout(r32f, binding = 0) uniform image2DArray texTrail;
layout(rgba32f, binding = 1) uniform image2D texRender;
layout(binding = 2, std430)buffer ColorLUT{ vec4 colorLUT[]; };
layout(binding = 3, std430)buffer SpeciesSettings{ Settings settings[]; };

/**********************************************************************************************************************/
/************************************************----UNIFORMS----******************************************************/
/**********************************************************************************************************************/
uniform vec3 backgroundColor;
uniform int speciesCount;
uniform BLEND_TYPE blendType;

/**********************************************************************************************************************/
/********************************************----RENDER_FUNCTIONS----**************************************************/
/**********************************************************************************************************************/
vec3 additiveColor(ivec2 texCoord) {
    vec3 finColor = vec3(0);
    float t = 0;
    for (int speciesId = 0; speciesId < speciesCount; ++speciesId) {
        const Settings sSettings = settings[speciesId];
        const float trailValue = min(1.0, imageLoad(texTrail, ivec3(texCoord, speciesId)).r);

        if (trailValue == 0) {
            continue;
        }

        const vec3 color = colorLUT[uint(pow(trailValue, sSettings.trailPow) * 255) + speciesId * 256].xyz;

        finColor += color * trailValue;
        t += trailValue;
    }

    finColor += backgroundColor * (1 - min(1, t));
    return finColor;
}

vec3 layeredColor(ivec2 texCoord) {
    vec3 finColor = vec3(0);
    float t = 0;
    for (int speciesId = 0; speciesId < speciesCount; ++speciesId) {
        const Settings sSettings = settings[speciesId];
        const float trailValue = min(1.0, imageLoad(texTrail, ivec3(texCoord, speciesId)).r);

        if (trailValue == 0) {
            continue;
        }

        const vec3 color = colorLUT[uint(pow(trailValue, sSettings.trailPow) * 255) + speciesId * 256].xyz;

        finColor = mix(finColor, color, trailValue);
        t += trailValue;
    }

    finColor += backgroundColor * (1 - min(1, t));
    return finColor;
}

vec3 alphaMixColor(ivec2 texCoord) {
    float totalTrailVal = 0;
    for (int speciesId = 0; speciesId < speciesCount; ++speciesId) {
        totalTrailVal += min(1.0, imageLoad(texTrail, ivec3(texCoord, speciesId)).r);
    }
    vec3 finColor = vec3(0);
    float t = 0;
    if (totalTrailVal > 0) {
        for (int speciesId = 0; speciesId < speciesCount; ++speciesId) {
            const Settings sSettings = settings[speciesId];
            const float trailValue = min(1.0, imageLoad(texTrail, ivec3(texCoord, speciesId)).r);

            if (trailValue == 0) {
                continue;
            }

            const vec3 color = colorLUT[uint(pow(trailValue, sSettings.trailPow) * 255) + speciesId * 256].xyz;

            finColor += color * (trailValue / (totalTrailVal / trailValue));
            t = max(t, trailValue);
        }
        finColor += backgroundColor * (1 - min(1, t));
    } else {
        finColor = backgroundColor;
    }
    return finColor;
}

void main() {
    const ivec2 dimensions = imageSize(texRender);

    if (gl_GlobalInvocationID.x >= dimensions.x) {
        return;
    }
    if (gl_GlobalInvocationID.y >= dimensions.y) {
        return;
    }
    const ivec2 texCoord = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    vec3 result;
    switch (blendType) {
        case BLEND_ADDITIVE:
        result = additiveColor(texCoord);
        break;
        case BLEND_ALPHA_MIX:
        result = alphaMixColor(texCoord);
        break;
        case BLEND_LAYERED:
        result = layeredColor(texCoord);
        break;
    }

    imageStore(texRender, texCoord, vec4(result, 1.0));
}